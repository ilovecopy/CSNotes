import{_ as e,c as t,a as h,o as n}from"./app-DKkA6jZv.js";const r={};function s(o,a){return n(),t("div",null,a[0]||(a[0]=[h('<h1 id="_3-2-组帧" tabindex="-1"><a class="header-anchor" href="#_3-2-组帧"><span>3.2 组帧</span></a></h1><p>将比特组合帧为单位传输，是为了出错时只重发出错的帧</p><h2 id="_3-2-1-字符计数法" tabindex="-1"><a class="header-anchor" href="#_3-2-1-字符计数法"><span>3.2.1 字符计数法</span></a></h2><p>每一帧开头标明有几个字节</p><table><thead><tr><th>4</th><th>1</th><th>2</th><th>3</th></tr></thead></table><p>第一帧：如上图</p><h2 id="_3-2-2-字符填充的首位定界符法" tabindex="-1"><a class="header-anchor" href="#_3-2-2-字符填充的首位定界符法"><span>3.2.2 字符填充的首位定界符法</span></a></h2><p>在每个数据前加上 ESC 转义字符填充。 FLAG（中间是数据部分，包括 ESCESC 或 ESCFLAG）FLAG</p><h2 id="_3-2-3-零比特填充的首位标志法" tabindex="-1"><a class="header-anchor" href="#_3-2-3-零比特填充的首位标志法"><span>3.2.3 零比特填充的首位标志法</span></a></h2><p>首尾是 01111110，然后每 5 个 1 放一个 0 阻止连续 6 个 1</p><h2 id="_3-2-4-违规编码法" tabindex="-1"><a class="header-anchor" href="#_3-2-4-违规编码法"><span>3.2.4 违规编码法</span></a></h2><p>高 - 高和低 - 低为首尾 曼彻斯特违规编码</p>',12)]))}const c=e(r,[["render",s]]),d=JSON.parse('{"path":"/network/032.html","title":"3.2 组帧","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1698592164000,"contributors":[{"name":"ilovecopy","username":"ilovecopy","email":"1205611509@qq.com","commits":1,"url":"https://github.com/ilovecopy"}],"changelog":[{"hash":"2be1877336d36add6192906de44e87ab5b1df4ec","time":1698592164000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"}]},"filePathRelative":"network/032.md"}');export{c as comp,d as data};
