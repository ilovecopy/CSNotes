import{_ as p,c as t,a,b as o,e as n,d as c,w as l,r as i,o as r}from"./app-DKkA6jZv.js";const u={};function d(k,s){const e=i("RouteLink");return r(),t("div",null,[s[3]||(s[3]=a(`<h1 id="一、redis-数据结构" tabindex="-1"><a class="header-anchor" href="#一、redis-数据结构"><span>一、Redis 数据结构</span></a></h1><h2 id="_1-简单动态字符串" tabindex="-1"><a class="header-anchor" href="#_1-简单动态字符串"><span>1.简单动态字符串</span></a></h2><h2 id="_2-链表" tabindex="-1"><a class="header-anchor" href="#_2-链表"><span>2.链表</span></a></h2><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token operator">*</span>prev<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">listNode</span> <span class="token operator">*</span>next<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token operator">*</span>value<span class="token punctuation">;</span></span>
<span class="line"><span class="token punctuation">}</span> listNode<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div></div>`,4)),o("p",null,[s[1]||(s[1]=n("listNode 是一个")),c(e,{to:"/datastructure/023.html"},{default:l(()=>s[0]||(s[0]=[n("双向链表")])),_:1,__:[0]}),s[2]||(s[2]=n("。"))]),s[4]||(s[4]=a(`<div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">list</span> <span class="token punctuation">{</span></span>
<span class="line">    listNode <span class="token operator">*</span>head<span class="token punctuation">;</span><span class="token comment">//表头节点</span></span>
<span class="line">    listNode <span class="token operator">*</span>tail<span class="token punctuation">;</span><span class="token comment">//表尾节点</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token operator">*</span>dup<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//节点复制函数</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token punctuation">(</span><span class="token operator">*</span>free<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//节点释放函数</span></span>
<span class="line">    <span class="token keyword">int</span> <span class="token punctuation">(</span><span class="token operator">*</span>match<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token keyword">void</span> <span class="token operator">*</span>ptr<span class="token punctuation">,</span> <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//节点对比函数</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len<span class="token punctuation">;</span><span class="token comment">//链表所包含的节点数量</span></span>
<span class="line"><span class="token punctuation">}</span> list<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div></div><figure><img src="https://csnotes.oss-cn-beijing.aliyuncs.com/photos/双向链表.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="_3-字典" tabindex="-1"><a class="header-anchor" href="#_3-字典"><span>3.字典</span></a></h2><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">struct</span> <span class="token class-name">dictEntry</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token operator">*</span>key<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">union</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">void</span> <span class="token operator">*</span>val<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">uint64_t</span> u64<span class="token punctuation">;</span></span>
<span class="line">        <span class="token class-name">int64_t</span> s64<span class="token punctuation">;</span></span>
<span class="line">        <span class="token keyword">double</span> d<span class="token punctuation">;</span></span>
<span class="line">    <span class="token punctuation">}</span> v<span class="token punctuation">;</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">dictEntry</span> <span class="token operator">*</span>next<span class="token punctuation">;</span>     <span class="token comment">/* Next entry in the same hash bucket. */</span></span>
<span class="line">    <span class="token keyword">void</span> <span class="token operator">*</span>metadata<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span>           <span class="token comment">/* An arbitrary number of bytes (starting at a</span>
<span class="line">                                 * pointer-aligned address) of size as returned</span>
<span class="line">                                 * by dictType&#39;s dictEntryMetadataBytes(). */</span></span>
<span class="line"><span class="token punctuation">}</span><span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div></div><h2 id="_4-跳跃表" tabindex="-1"><a class="header-anchor" href="#_4-跳跃表"><span>4.跳跃表</span></a></h2><h4 id="跳跃表节点" tabindex="-1"><a class="header-anchor" href="#跳跃表节点"><span>跳跃表节点</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token punctuation">{</span></span>
<span class="line">    sds ele<span class="token punctuation">;</span><span class="token comment">//</span></span>
<span class="line">    <span class="token keyword">double</span> score<span class="token punctuation">;</span><span class="token comment">//分值</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>backward<span class="token punctuation">;</span><span class="token comment">//后退指针</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">zskiplistLevel</span> <span class="token punctuation">{</span></span>
<span class="line">        <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>forward<span class="token punctuation">;</span><span class="token comment">//前进指针</span></span>
<span class="line">        <span class="token keyword">unsigned</span> <span class="token keyword">long</span> span<span class="token punctuation">;</span><span class="token comment">//跨度</span></span>
<span class="line">    <span class="token punctuation">}</span> level<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//层</span></span>
<span class="line"><span class="token punctuation">}</span> zskiplistNode<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div></div><h4 id="跳跃表" tabindex="-1"><a class="header-anchor" href="#跳跃表"><span>跳跃表</span></a></h4><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">zskiplist</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token keyword">struct</span> <span class="token class-name">zskiplistNode</span> <span class="token operator">*</span>header<span class="token punctuation">,</span> <span class="token operator">*</span>tail<span class="token punctuation">;</span><span class="token comment">//表头指针和表尾指针</span></span>
<span class="line">    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> length<span class="token punctuation">;</span><span class="token comment">//表中节点的数量</span></span>
<span class="line">    <span class="token keyword">int</span> level<span class="token punctuation">;</span><span class="token comment">//表中层数最大的节点的层数</span></span>
<span class="line"><span class="token punctuation">}</span> zskiplist<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div></div><h2 id="_5-整数集合" tabindex="-1"><a class="header-anchor" href="#_5-整数集合"><span>5.整数集合</span></a></h2><div class="language-c line-numbers-mode" data-highlighter="prismjs" data-ext="c"><pre><code class="language-c"><span class="line"><span class="token keyword">typedef</span> <span class="token keyword">struct</span> <span class="token class-name">intset</span> <span class="token punctuation">{</span></span>
<span class="line">    <span class="token class-name">uint32_t</span> encoding<span class="token punctuation">;</span><span class="token comment">//编码方式</span></span>
<span class="line">    <span class="token class-name">uint32_t</span> length<span class="token punctuation">;</span><span class="token comment">//集合包含的元素数量</span></span>
<span class="line">    <span class="token class-name">int8_t</span> contents<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//保存元素的数组</span></span>
<span class="line"><span class="token punctuation">}</span> intset<span class="token punctuation">;</span></span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div></div><p>整数集合</p><h2 id="_6-压缩列表" tabindex="-1"><a class="header-anchor" href="#_6-压缩列表"><span>6.压缩列表</span></a></h2><h2 id="_7-对象" tabindex="-1"><a class="header-anchor" href="#_7-对象"><span>7.对象</span></a></h2>`,14))])}const h=p(u,[["render",d]]),y=JSON.parse('{"path":"/redis/011.html","title":"一、Redis 数据结构","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1720103859000,"contributors":[{"name":"ilovecopy","username":"ilovecopy","email":"1205611509@qq.com","commits":4,"url":"https://github.com/ilovecopy"}],"changelog":[{"hash":"d5db2459b570e661d3d7d99a79f49d17d97f2ddc","time":1720103859000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"},{"hash":"87b08f0911b7aaf6d0e94d69cf5ce27e109796b0","time":1699626832000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"},{"hash":"87edf6c08c4a79890356eb85f53da45fb5c46d12","time":1698675745000,"email":"1205611509@qq.com","author":"ilovecopy","message":"fix format"},{"hash":"2be1877336d36add6192906de44e87ab5b1df4ec","time":1698592164000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"}]},"filePathRelative":"redis/011.md"}');export{h as comp,y as data};
