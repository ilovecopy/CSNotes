import{_ as e,c as t,a as p,o}from"./app-DKkA6jZv.js";const n={};function s(i,a){return o(),t("div",null,a[0]||(a[0]=[p('<h1 id="_5-4-控制器的功能和工作原理" tabindex="-1"><a class="header-anchor" href="#_5-4-控制器的功能和工作原理"><span>5.4 控制器的功能和工作原理</span></a></h1><h2 id="_5-4-1-控制器的结构和功能" tabindex="-1"><a class="header-anchor" href="#_5-4-1-控制器的结构和功能"><span>5.4.1 控制器的结构和功能</span></a></h2><h2 id="_5-4-2-硬布线控制器" tabindex="-1"><a class="header-anchor" href="#_5-4-2-硬布线控制器"><span>5.4.2 硬布线控制器</span></a></h2><figure><img src="https://csnotes.oss-cn-beijing.aliyuncs.com/photos/硬布线控制器.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>取指阶段的微操作都是一样的。</p><p>间址周期的微操作也都是一样的。</p><p>执行阶段就不一样了。</p><p>可以并行的微操作放在一个节拍内进行。</p><p>安排微操作时序的原则</p><p>原则一：微操作的先后顺序不得随意更改。</p><p>原则二：被控对象不同的微操作尽量安排在一个节拍内完成。</p><p>原则三：占用时间较短的微操作尽量安排在一个节拍内完成，并允许有先后顺序。</p><p>硬布线控制器特点：指令越多，设计和实现就越复杂，因此一般用于 RISC</p><h2 id="_5-4-3-微程序控制器" tabindex="-1"><a class="header-anchor" href="#_5-4-3-微程序控制器"><span>5.4.3 微程序控制器</span></a></h2><p>控制存储器用来存放实现指令系统的所有微指令，是一种只读存储器，机器运行时只读不写，在 CPU 的控制器内。CS 按照微指令的地址访存。</p><h3 id="_3-微指令的编码方式" tabindex="-1"><a class="header-anchor" href="#_3-微指令的编码方式"><span>3.微指令的编码方式</span></a></h3><p>MAR、MDR、IR 是 CPU 的内部工作寄存器，对汇编程序员不可见。</p>',17)]))}const d=e(n,[["render",s]]),r=JSON.parse('{"path":"/computerOrganization/054.html","title":"5.4 控制器的功能和工作原理","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1720103859000,"contributors":[{"name":"ilovecopy","username":"ilovecopy","email":"1205611509@qq.com","commits":2,"url":"https://github.com/ilovecopy"}],"changelog":[{"hash":"d5db2459b570e661d3d7d99a79f49d17d97f2ddc","time":1720103859000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"},{"hash":"2be1877336d36add6192906de44e87ab5b1df4ec","time":1698592164000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"}]},"filePathRelative":"computerOrganization/054.md"}');export{d as comp,r as data};
