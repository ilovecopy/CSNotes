import{_ as d,c as a,a as e,o as h}from"./app-DKkA6jZv.js";const i={};function r(s,t){return h(),a("div",null,t[0]||(t[0]=[e('<h1 id="_6-4-图的应用" tabindex="-1"><a class="header-anchor" href="#_6-4-图的应用"><span>6.4 图的应用</span></a></h1><h2 id="_6-4-1-最小生成树" tabindex="-1"><a class="header-anchor" href="#_6-4-1-最小生成树"><span>6.4.1 最小生成树</span></a></h2><h3 id="_1-prim-算法" tabindex="-1"><a class="header-anchor" href="#_1-prim-算法"><span>1.Prim 算法</span></a></h3><p>每次将代价最小的新顶点纳入生成树，直到所有顶点都纳入为止。</p><p>时间复杂度 $O(v^2)$</p><h3 id="_2-kruskal-算法" tabindex="-1"><a class="header-anchor" href="#_2-kruskal-算法"><span>2.Kruskal 算法</span></a></h3><p>每次选择一条权值最小的边连通，直到所有结点连通。</p><p>时间复杂度 $O(|E|log|E|)$</p><h2 id="_6-4-2-最短路径" tabindex="-1"><a class="header-anchor" href="#_6-4-2-最短路径"><span>6.4.2 最短路径</span></a></h2><h3 id="dijkstra-算法求单源最短路径" tabindex="-1"><a class="header-anchor" href="#dijkstra-算法求单源最短路径"><span>Dijkstra 算法求单源最短路径</span></a></h3><p>迭代，每次求出一个最短路径</p><p>不适用于负权值带权图</p><div class="hint-container tip"><p class="hint-container-title">求源点 a 到其他各顶点的最短路径？</p></div><figure><img src="https://csnotes.oss-cn-beijing.aliyuncs.com/photos/迪杰斯特拉.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><table><thead><tr><th>b</th><th>c</th><th>d</th><th>e</th><th>f</th></tr></thead><tbody><tr><td>2</td><td>5</td><td>∞</td><td>∞</td><td>∞</td></tr><tr><td><u>2</u></td><td>3</td><td>5</td><td>∞</td><td>∞</td></tr><tr><td><u>2</u></td><td><u>3</u></td><td>5</td><td>6</td><td>4</td></tr><tr><td><u>2</u></td><td><u>3</u></td><td>5</td><td>6</td><td><u>4</u></td></tr><tr><td><u>2</u></td><td><u>3</u></td><td><u>5</u></td><td>6</td><td><u>4</u></td></tr><tr><td><u>2</u></td><td><u>3</u></td><td><u>5</u></td><td><u>6</u></td><td><u>4</u></td></tr></tbody></table><h3 id="floyd-算法求各顶点之间的最短路径问题" tabindex="-1"><a class="header-anchor" href="#floyd-算法求各顶点之间的最短路径问题"><span>Floyd 算法求各顶点之间的最短路径问题</span></a></h3><p>允许 1 个结点中转</p><p>允许 2 个结点中转</p><p>。。</p><p>允许所有结点中转</p><h2 id="_6-4-3-有向无环图描述表达式" tabindex="-1"><a class="header-anchor" href="#_6-4-3-有向无环图描述表达式"><span>6.4.3 有向无环图描述表达式</span></a></h2><p>DAG 图：有向无环图</p><h2 id="_6-4-4-拓扑排序" tabindex="-1"><a class="header-anchor" href="#_6-4-4-拓扑排序"><span>6.4.4 拓扑排序</span></a></h2><p>AOV 网：DAG 图表示工程，顶点表示活动。</p><h2 id="_6-4-5-关键路径" tabindex="-1"><a class="header-anchor" href="#_6-4-5-关键路径"><span>6.4.5 关键路径</span></a></h2><p>从源点到汇点的所有路径当中，具有最大路径长度的路径称为关键路径。</p><p>AOE 网：边表示活动</p><h3 id="事件的最早发生时间-ve-k" tabindex="-1"><a class="header-anchor" href="#事件的最早发生时间-ve-k"><span>事件的最早发生时间 ve(k)</span></a></h3><p>从源点 $v_{1}$ 到顶点 $v_{k}$ 的最长路径长度。</p><p>万事具备，只欠东风</p><p>$ve(源点)=0$</p><p>$ve(k)=Max{ve(j)+Weight(v_{j},v_{k})}$</p><h3 id="事件的最迟发生时间-vl-k" tabindex="-1"><a class="header-anchor" href="#事件的最迟发生时间-vl-k"><span>事件的最迟发生时间 vl(k)</span></a></h3><p>结束时间 - 所需时间=最晚开始时间</p><p>$vl(汇点)=ve(汇点)$</p><p>$vl(k)=Min{vl(j)-Weight(v_{k},v_{j})}$</p><h3 id="活动-a-i-的最早开始时间-e-i" tabindex="-1"><a class="header-anchor" href="#活动-a-i-的最早开始时间-e-i"><span>活动 $a_{i}$ 的最早开始时间 e(i)</span></a></h3><p>$e(i)=ve(i)$</p><h3 id="活动-a-i-的最迟开始时间-l-i" tabindex="-1"><a class="header-anchor" href="#活动-a-i-的最迟开始时间-l-i"><span>活动 $a_{i}$ 的最迟开始时间 l(i)</span></a></h3><p>$l(i)=vl(i)-Weight(v_{k},v_{j})$</p><h3 id="活动-a-i-的时间差额-d-i-l-i-e-i" tabindex="-1"><a class="header-anchor" href="#活动-a-i-的时间差额-d-i-l-i-e-i"><span>活动 $a_{i}$ 的时间差额 d(i)=l(i)-e(i)</span></a></h3><p>在不增加整个工程所需总时间的情况下，活动 $a_{i}$ 可以拖延的时间。</p><figure><img src="https://csnotes.oss-cn-beijing.aliyuncs.com/photos/关键路径.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><table><thead><tr><th></th><th>V1</th><th>V2</th><th>V3</th><th>V4</th><th>V5</th><th>V6</th></tr></thead><tbody><tr><td>ve(i)</td><td>0</td><td>3</td><td>2</td><td>6</td><td>6</td><td>8</td></tr><tr><td>vl(i)</td><td>0</td><td>4</td><td>2</td><td>6</td><td>7</td><td>8</td></tr></tbody></table><table><thead><tr><th></th><th>a1</th><th>a2</th><th>a3</th><th>a4</th><th>a5</th><th>a6</th><th>a7</th><th>a8</th></tr></thead><tbody><tr><td>e(i)</td><td>0</td><td>0</td><td>3</td><td>3</td><td>2</td><td>2</td><td>6</td><td>6</td></tr><tr><td>l(i)</td><td>1</td><td>0</td><td>4</td><td>4</td><td>2</td><td>5</td><td>6</td><td>7</td></tr><tr><td>l(i)-e(i)</td><td>1</td><td>0</td><td>1</td><td>1</td><td>0</td><td>3</td><td>0</td><td>1</td></tr></tbody></table>',45)]))}const n=d(i,[["render",r]]),c=JSON.parse('{"path":"/datastructure/064.html","title":"6.4 图的应用","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1720103859000,"contributors":[{"name":"ilovecopy","username":"ilovecopy","email":"1205611509@qq.com","commits":2,"url":"https://github.com/ilovecopy"}],"changelog":[{"hash":"d5db2459b570e661d3d7d99a79f49d17d97f2ddc","time":1720103859000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"},{"hash":"2be1877336d36add6192906de44e87ab5b1df4ec","time":1698592164000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"}]},"filePathRelative":"datastructure/064.md"}');export{n as comp,c as data};
