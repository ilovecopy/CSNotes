import{_ as e,c as p,a as t,o as n}from"./app-DKkA6jZv.js";const s={};function o(r,a){return n(),p("div",null,a[0]||(a[0]=[t('<h1 id="_3-1-数据链路层的功能" tabindex="-1"><a class="header-anchor" href="#_3-1-数据链路层的功能"><span>3.1 数据链路层的功能</span></a></h1><h2 id="_3-1-1-为网络层提供服务" tabindex="-1"><a class="header-anchor" href="#_3-1-1-为网络层提供服务"><span>3.1.1 为网络层提供服务</span></a></h2><p>连接是建立在确认机制的基础上的</p><p>无确认无连接服务</p><p>有确认无连接服务</p><p>有确认有连接服务</p><h2 id="_3-1-3-帧定界、帧同步与透明传输" tabindex="-1"><a class="header-anchor" href="#_3-1-3-帧定界、帧同步与透明传输"><span>3.1.3 帧定界、帧同步与透明传输</span></a></h2><p>帧定界：确认帧的界限</p><p>帧同步：接收方应能从接收到的二进制比特流中区分出帧的起始与终止</p><p>透明传输：不管所传输的数据是什么样的比特组合，都应当能在链路上传播</p><p>封装成帧=添头添尾。</p><p>将网络层的分组，封装成帧———也就是包装，帧的数据部分长度上限———最大传输单元（MTU）</p><h2 id="_3-1-4-流量控制" tabindex="-1"><a class="header-anchor" href="#_3-1-4-流量控制"><span>3.1.4 流量控制</span></a></h2><h2 id="_3-1-5-差错控制" tabindex="-1"><a class="header-anchor" href="#_3-1-5-差错控制"><span>3.1.5 差错控制</span></a></h2><p>位错：通过 CRC 发现位错，通过自动重传 ARQ 重发。</p><p>帧错：定时器和编号机制</p>',16)]))}const c=e(s,[["render",o]]),d=JSON.parse('{"path":"/network/031.html","title":"3.1 数据链路层的功能","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1698592164000,"contributors":[{"name":"ilovecopy","username":"ilovecopy","email":"1205611509@qq.com","commits":1,"url":"https://github.com/ilovecopy"}],"changelog":[{"hash":"2be1877336d36add6192906de44e87ab5b1df4ec","time":1698592164000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"}]},"filePathRelative":"network/031.md"}');export{c as comp,d as data};
