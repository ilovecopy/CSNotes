import{_ as e,c as t,a as r,o as p}from"./app-DKkA6jZv.js";const o={};function n(s,a){return p(),t("div",null,a[0]||(a[0]=[r('<h1 id="_8-5-归并排序和基数排序" tabindex="-1"><a class="header-anchor" href="#_8-5-归并排序和基数排序"><span>8.5 归并排序和基数排序</span></a></h1><h2 id="_8-5-1-归并排序" tabindex="-1"><a class="header-anchor" href="#_8-5-1-归并排序"><span>8.5.1 归并排序</span></a></h2><p>多个有序表合成一个有序表。</p><p>比较次数数量级与初始状态无关。</p><h2 id="_8-5-2-基数排序" tabindex="-1"><a class="header-anchor" href="#_8-5-2-基数排序"><span>8.5.2 基数排序</span></a></h2><p>长度为 n 的线性表排序。</p><p>高位优先（MSD）：从高位到低位分配和收集。</p><p>低位优先（LSD）：从低位到高位分配和收集。</p><p>辅助队列空间 r(r 个队列：r 个队头指针和 r 个队尾指针)，r 为基数。</p><p>d 趟分配和收集，一趟分配需要 $O(n)$，一趟收集需要 $O(r)$。</p><p>时间复杂度 $O(d(n+r))$。</p><p>元素移动次数与关键字初始排列次序无关。</p>',12)]))}const d=e(o,[["render",n]]),i=JSON.parse('{"path":"/datastructure/085.html","title":"8.5 归并排序和基数排序","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1698592164000,"contributors":[{"name":"ilovecopy","username":"ilovecopy","email":"1205611509@qq.com","commits":1,"url":"https://github.com/ilovecopy"}],"changelog":[{"hash":"2be1877336d36add6192906de44e87ab5b1df4ec","time":1698592164000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"}]},"filePathRelative":"datastructure/085.md"}');export{d as comp,i as data};
