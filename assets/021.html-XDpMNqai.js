import{_ as e,c as p,a as h,o as n}from"./app-DKkA6jZv.js";const s={};function r(d,a){return n(),p("div",null,a[0]||(a[0]=[h('<h1 id="_2-1-通信基础" tabindex="-1"><a class="header-anchor" href="#_2-1-通信基础"><span>2.1 通信基础</span></a></h1><h2 id="_2-1-1-基本概念" tabindex="-1"><a class="header-anchor" href="#_2-1-1-基本概念"><span>2.1.1 基本概念</span></a></h2><p>k 进制码元可以表示 k 种状态。</p><p>码元传输速率：只与码元长度有关。</p><p>信息传输速率：单位时间传输比特数。</p><h2 id="_2-1-2-奈奎斯特定理和香农定理" tabindex="-1"><a class="header-anchor" href="#_2-1-2-奈奎斯特定理和香农定理"><span>2.1.2 奈奎斯特定理和香农定理</span></a></h2><h3 id="_1-奈奎斯特特定理-无噪声" tabindex="-1"><a class="header-anchor" href="#_1-奈奎斯特特定理-无噪声"><span>1.奈奎斯特特定理（无噪声）</span></a></h3><p>极限传输速率=$2W\\log_{2} V$(b/s)</p><h3 id="_2-香农定理-有噪声" tabindex="-1"><a class="header-anchor" href="#_2-香农定理-有噪声"><span>2.香农定理（有噪声）</span></a></h3><p>极限传输速率=$W\\log_{2} \\left( 1+S/N\\right)$(b/s)</p><p>信噪比=$10\\log_{10} \\left( S/N\\right)$（dB）</p><h2 id="_2-1-3-编码与调制" tabindex="-1"><a class="header-anchor" href="#_2-1-3-编码与调制"><span>2.1.3 编码与调制</span></a></h2><h3 id="_1-数字数据编码为数字信号" tabindex="-1"><a class="header-anchor" href="#_1-数字数据编码为数字信号"><span>1.数字数据编码为数字信号</span></a></h3><h4 id="_1-非归零编码-nrz" tabindex="-1"><a class="header-anchor" href="#_1-非归零编码-nrz"><span>（1）非归零编码（NRZ）</span></a></h4><p>高 1 低 0</p><h4 id="_2-归零编码-rz" tabindex="-1"><a class="header-anchor" href="#_2-归零编码-rz"><span>（2）归零编码（RZ）</span></a></h4><p>每个码元内都要归零</p><h4 id="_3-反向非归零编码-nrzi" tabindex="-1"><a class="header-anchor" href="#_3-反向非归零编码-nrzi"><span>（3）反向非归零编码 (NRZI)</span></a></h4><p>不变为 1，反转为 0</p><h4 id="_4-曼彻斯特编码" tabindex="-1"><a class="header-anchor" href="#_4-曼彻斯特编码"><span>（4）曼彻斯特编码</span></a></h4><p>高低为 1，低高为 0</p><p>实现对通道过程中收发双方的数据同步。</p><p>常用于局域网传输。</p><h4 id="_5-差分曼彻斯特编码" tabindex="-1"><a class="header-anchor" href="#_5-差分曼彻斯特编码"><span>（5）差分曼彻斯特编码</span></a></h4><p>同 1 异 0。</p><h2 id="_2-1-4-电路交换、报文交换与分组交换" tabindex="-1"><a class="header-anchor" href="#_2-1-4-电路交换、报文交换与分组交换"><span>2.1.4 电路交换、报文交换与分组交换</span></a></h2><h3 id="_1-电路交换" tabindex="-1"><a class="header-anchor" href="#_1-电路交换"><span>1.电路交换</span></a></h3><p>连接建立，数据传输，连接释放。</p><p>传输时延小，不保证无差错。</p><p>就像打电话。</p><p>缺点：连接建立时间长，不适合计算机之间的通信。</p><h3 id="_2-报文交换" tabindex="-1"><a class="header-anchor" href="#_2-报文交换"><span>2.报文交换</span></a></h3><p>报文是站点一次性要发送的数据块，存储转发</p><p>传输时延大</p><h3 id="_3-分组交换" tabindex="-1"><a class="header-anchor" href="#_3-分组交换"><span>3.分组交换</span></a></h3><p>要把数据分成大小相当的小数据片，每片都要加上控制信息（如目的地址），因而传送数据总开销较多。信道利用率高。</p><p>分组交换不必在传输前建立双方的物理链路，因为是存储转发。比如 QQ 好友不在线，也能发信息，此时双方没有固定的物理链路。</p><p>一个简单的类比是，考虑两家餐馆，一家需要顾客预订，而另一家不需要预订，但不保证能安排顾客。对于需要预订的那家餐馆，我们在离开家之前必须承受先打电话预订的麻烦，但当我们到达该餐馆时，原则上我们能够立即入座并点菜，对于不需要预订的那家餐馆，我们不必麻烦地预订餐桌，但当我们到达该餐馆时，也许不得不先等待一张餐桌空闲后才能入座。</p><h2 id="_2-1-5-数据报与虚电路" tabindex="-1"><a class="header-anchor" href="#_2-1-5-数据报与虚电路"><span>2.1.5 数据报与虚电路</span></a></h2><p>都是分组交换的一种方式</p><h3 id="_1-数据报" tabindex="-1"><a class="header-anchor" href="#_1-数据报"><span>1.数据报</span></a></h3><p>数据报方式是无连接的：不事先为分组的传输确定路径，每个分组独立确认路径，不同分组传输路径可能不同。</p><p>提供不可靠服务</p><p>UDP</p><h3 id="_2-虚电路" tabindex="-1"><a class="header-anchor" href="#_2-虚电路"><span>2.虚电路</span></a></h3><p>结合电路交换和数据报。</p><p>虚电路建立、数据传输、虚电路释放。</p><p>TCP</p><h2 id="_2-1-6-同步传输、异步传输" tabindex="-1"><a class="header-anchor" href="#_2-1-6-同步传输、异步传输"><span>2.1.6 同步传输、异步传输</span></a></h2><p>同步传输先发送 SYN。</p><p>异步传输可任何时候开始，加上开始位和结束位。</p>',51)]))}const i=e(s,[["render",r]]),t=JSON.parse('{"path":"/network/021.html","title":"2.1 通信基础","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1698592164000,"contributors":[{"name":"ilovecopy","username":"ilovecopy","email":"1205611509@qq.com","commits":1,"url":"https://github.com/ilovecopy"}],"changelog":[{"hash":"2be1877336d36add6192906de44e87ab5b1df4ec","time":1698592164000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"}]},"filePathRelative":"network/021.md"}');export{i as comp,t as data};
