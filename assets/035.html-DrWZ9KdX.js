import{_ as e,c as p,a as h,o as s}from"./app-DKkA6jZv.js";const n={};function r(c,a){return s(),p("div",null,a[0]||(a[0]=[h('<h1 id="_3-5-介质访问控制" tabindex="-1"><a class="header-anchor" href="#_3-5-介质访问控制"><span>3.5 介质访问控制</span></a></h1><p>隔离广播式通信，隔离同一信道不同结点的信号，是数据链路层的一个子层，叫介质访问控制子层（MAC)</p><h2 id="_3-5-1-信道划分介质访问控制-静态" tabindex="-1"><a class="header-anchor" href="#_3-5-1-信道划分介质访问控制-静态"><span>3.5.1 信道划分介质访问控制（静态）</span></a></h2><h3 id="_1-频分多路复用-并行" tabindex="-1"><a class="header-anchor" href="#_1-频分多路复用-并行"><span>1.频分多路复用（并行）</span></a></h3><p>共享时间，同时走双车道</p><h3 id="_2-时分多路复用-并发" tabindex="-1"><a class="header-anchor" href="#_2-时分多路复用-并发"><span>2.时分多路复用（并发）</span></a></h3><p>共享空间，轮流走</p><h3 id="_3-波分多路复用" tabindex="-1"><a class="header-anchor" href="#_3-波分多路复用"><span>3.波分多路复用</span></a></h3><h3 id="_4-码分多路复用" tabindex="-1"><a class="header-anchor" href="#_4-码分多路复用"><span>4.码分多路复用</span></a></h3><p>共享时间和空间，东西放在一辆车上，到了再分开</p><h3 id="cdma-码分多址" tabindex="-1"><a class="header-anchor" href="#cdma-码分多址"><span>CDMA 码分多址</span></a></h3><p>每个比特分成 m 个时间槽</p><h2 id="_3-5-2-随机访问介质访问控制-动态-产生冲突" tabindex="-1"><a class="header-anchor" href="#_3-5-2-随机访问介质访问控制-动态-产生冲突"><span>3.5.2 随机访问介质访问控制（动态）（产生冲突）</span></a></h2><p>既不共享空间，也不共享时间。将广播信道转换为点对点信道</p><p>胜利者通过争用获得信道，从而获取信息的发送权。</p><h3 id="_1-aloha-协议-不听就说" tabindex="-1"><a class="header-anchor" href="#_1-aloha-协议-不听就说"><span>1.ALOHA 协议 (不听就说)</span></a></h3><h4 id="_1-纯-aloha-协议" tabindex="-1"><a class="header-anchor" href="#_1-纯-aloha-协议"><span>（1）纯 ALOHA 协议</span></a></h4><p>想发就发，如果冲突就随机重传</p><h4 id="_2-时隙-aloha-协议" tabindex="-1"><a class="header-anchor" href="#_2-时隙-aloha-协议"><span>（2）时隙 ALOHA 协议</span></a></h4><p>将时间划分成一段段等长时隙，每个时隙开始时才能发送一个帧（整点发送），如果冲突，随机整点重传</p><h3 id="_2-csma-协议-先听再说" tabindex="-1"><a class="header-anchor" href="#_2-csma-协议-先听再说"><span>2.CSMA 协议（先听再说）</span></a></h3><h4 id="_1-1-坚持-csma" tabindex="-1"><a class="header-anchor" href="#_1-1-坚持-csma"><span>（1）1-坚持 CSMA</span></a></h4><p>信道空闲：立刻发送</p><p>信道忙：继续侦听</p><h4 id="_2-非坚持-csma" tabindex="-1"><a class="header-anchor" href="#_2-非坚持-csma"><span>（2）非坚持 CSMA</span></a></h4><p>信道空闲：立刻发送</p><p>信道忙：放弃侦听，等待一个随机时间再侦听</p><h4 id="_3-p-坚持-csma" tabindex="-1"><a class="header-anchor" href="#_3-p-坚持-csma"><span>（3）p-坚持 CSMA</span></a></h4><p>信道空闲：以概率 p 发送，以概率 1-p 推迟到下一个时隙</p><p>信道忙：持续侦听，直到信道空闲</p><h3 id="_3-csma-cd-协议-先听再说-边听边说-冲突停发-随机重发" tabindex="-1"><a class="header-anchor" href="#_3-csma-cd-协议-先听再说-边听边说-冲突停发-随机重发"><span>3.CSMA/CD 协议（先听再说，边听边说，冲突停发，随机重发）</span></a></h3><p>用于有线网络</p><p>争用期 2tao</p><p>最短帧长=争用期时间内发出的比特数。</p><p>等多久再发？2rtao,k=min[重传次数，10]，r=rand(0,2^k-1)</p><p>第一次重传：0 或 2r</p><p>第二次重传：0 或 2r 或 4r 或 6r</p><p>最小帧长 (bit)/数据传输速率&gt;2tao，才能在发送完毕前检测到冲突。</p><p>最小帧长=总线传播时延 x 数据传输速率 x2</p><p>拉屎💩，要在拉出💩之前检测裤子脱了没，最短💩长=拉到裤子的时间 x 拉屎速度 x2</p><h3 id="_4-csma-ca-协议-先预约" tabindex="-1"><a class="header-anchor" href="#_4-csma-ca-协议-先预约"><span>4.CSMA/CA 协议 (先预约)</span></a></h3><p>在 CSMA 的基础上增加了冲突避免功能。</p><p>广泛应用于无线局域网。</p><p>处理隐蔽站问题：发 RTS（request to send），回复 CTS(clear to send)</p><p>RTS————&gt;</p><p>&lt;—————CTS</p><p>DATA————&gt;</p><p>&lt;—————ACK</p><h2 id="_3-5-3-轮询访问-令牌传递协议" tabindex="-1"><a class="header-anchor" href="#_3-5-3-轮询访问-令牌传递协议"><span>3.5.3 轮询访问：令牌传递协议</span></a></h2><p>优势：CSMA/CD 网络各站随机发送数据，有冲突产生。负载很重时，冲突会加剧。而令牌环网各站轮流使用令牌发送数据，无论网络负载如何，都无冲突，正是它的突出优点。</p><p>同一时刻，环上只有一个数据在传输。</p><p>发完数据后，将令牌给下一个人。</p><p>网上所有节点共享网络带宽</p>',53)]))}const t=e(n,[["render",r]]),o=JSON.parse('{"path":"/network/035.html","title":"3.5 介质访问控制","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1698675745000,"contributors":[{"name":"ilovecopy","username":"ilovecopy","email":"1205611509@qq.com","commits":2,"url":"https://github.com/ilovecopy"}],"changelog":[{"hash":"87edf6c08c4a79890356eb85f53da45fb5c46d12","time":1698675745000,"email":"1205611509@qq.com","author":"ilovecopy","message":"fix format"},{"hash":"2be1877336d36add6192906de44e87ab5b1df4ec","time":1698592164000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"}]},"filePathRelative":"network/035.md"}');export{t as comp,o as data};
