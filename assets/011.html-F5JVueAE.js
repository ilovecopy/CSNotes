import{_ as e,c as s,a as n,o as i}from"./app-DKkA6jZv.js";const c={};function p(d,a){return i(),s("div",null,a[0]||(a[0]=[n(`<h1 id="_1-1-数据库" tabindex="-1"><a class="header-anchor" href="#_1-1-数据库"><span>1.1 数据库</span></a></h1><p>navicat 免费版本可以下载！</p><h2 id="表" tabindex="-1"><a class="header-anchor" href="#表"><span>表</span></a></h2><figure><img src="https://csnotes.oss-cn-beijing.aliyuncs.com/photos/表结构.drawio.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>页是被管理的，在内存中被 BufferManager 管理，在磁盘中被磁盘空间管理器管理。</p><p>页是 IO 的基本单位。</p><h2 id="页" tabindex="-1"><a class="header-anchor" href="#页"><span>页</span></a></h2><p>记录有定长的和不定长的。</p><p>页包括：页号、数据、脏位、锁、页缓存。</p><h2 id="page-header" tabindex="-1"><a class="header-anchor" href="#page-header"><span>Page Header</span></a></h2><p>页面头部。</p><h2 id="紧凑型" tabindex="-1"><a class="header-anchor" href="#紧凑型"><span>紧凑型</span></a></h2><h2 id="非紧凑型" tabindex="-1"><a class="header-anchor" href="#非紧凑型"><span>非紧凑型</span></a></h2><figure><img src="https://csnotes.oss-cn-beijing.aliyuncs.com/photos/DBMS.drawio.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><h2 id="disk-space-manager" tabindex="-1"><a class="header-anchor" href="#disk-space-manager"><span>Disk Space Manager</span></a></h2><p>DBMS 的最底层</p><p>目的：</p><p>1.将页映射到磁盘上</p><p>2.从磁盘将页加载到内存</p><p>3.将页存回磁盘，保证写</p><p>高层调用这层来读/写页，分配、取消分配逻辑页。</p><h2 id="不变长记录" tabindex="-1"><a class="header-anchor" href="#不变长记录"><span>不变长记录</span></a></h2><p>Record id=(Page,Location in Page)</p><p>Delete</p><h2 id="可变长记录" tabindex="-1"><a class="header-anchor" href="#可变长记录"><span>可变长记录</span></a></h2><h2 id="数据库简介" tabindex="-1"><a class="header-anchor" href="#数据库简介"><span>数据库简介</span></a></h2><p>事务管理器：通过 XID 文件记录事务的状态。可以快速访问和更新事务状态</p><p>8 字节、1 字节、1 字节</p><p>[00 00 00 00 00 00 00 00][01][02][01][01][00][01]</p><h2 id="为什么要有事务" tabindex="-1"><a class="header-anchor" href="#为什么要有事务"><span>为什么要有事务？</span></a></h2><p>事务是为了保证一堆状态打包执行。比如说转账，扣钱和加钱要同时执行。</p><p>考虑下面情况</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">T1 begin</span>
<span class="line">T2 begin</span>
<span class="line">T2 U(x)</span>
<span class="line">T1 R(x)</span>
<span class="line">...</span>
<span class="line">T1 commit</span>
<span class="line">崩溃</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div></div><p>由于 T1 读到了 T2 没有提交的事务。导致错误</p><div class="hint-container tip"><p class="hint-container-title">规定 1</p><p>正在进行的事务，不会读取其他任何未提交的事务产生的数据</p></div><p>第二种情况，假设 x 的初值是 0</p><div class="language-text line-numbers-mode" data-highlighter="prismjs" data-ext="text"><pre><code class="language-text"><span class="line">plaintext</span>
<span class="line">T1 begin</span>
<span class="line">T2 begin</span>
<span class="line">T1 set x = x+1 // 产生的日志为(T1, U, A, 0, 1)</span>
<span class="line">T2 set x = x+1 // 产生的日志为(T1, U, A, 1, 2)</span>
<span class="line">T2 commit</span>
<span class="line">MYDB break down</span>
<span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"></div></div><p>在系统崩溃时，T1 仍然是活跃状态。那么当数据库重新启动，执行恢复例程时，会对 T1 进行撤销，对 T2 进行重做，但是，无论撤销和重做的先后顺序如何，x 最后的结果，要么是 0，要么是 2，这都是错误的。</p><blockquote><p>出现这种问题的原因，归根结底是因为我们的日志太过简单，仅仅记录了”前相”和”后相”. 并单纯的依靠”前相”undo, 依靠”后相”redo. 这种简单的日志方式和恢复方式，并不能涵盖住所有数据库操作形成的语义</p></blockquote><div class="hint-container tip"><p class="hint-container-title">规定 2</p><p>正在进行的事务，不会修改其他任何未提交的事务修改或产生的数据。</p></div><h2 id="为什么要有日志" tabindex="-1"><a class="header-anchor" href="#为什么要有日志"><span>为什么要有日志？</span></a></h2><p>可以恢复崩溃的事务。</p><p>日志规定</p>`,43)]))}const o=e(c,[["render",p]]),l=JSON.parse('{"path":"/database/011.html","title":"1.1 数据库","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1748448407000,"contributors":[{"name":"ilovecopy","username":"ilovecopy","email":"1205611509@qq.com","commits":11,"url":"https://github.com/ilovecopy"}],"changelog":[{"hash":"89e4afb5d1ac7612c9f8d949aaeb5f56a0ac8c92","time":1748448407000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"},{"hash":"88d51a68f9ead57cb7eeb39b27fc28bccd4d1c7b","time":1748448303000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"},{"hash":"e907b6f45a4c18e3f84a92f1990980c210868002","time":1734854586000,"email":"1205611509@qq.com","author":"ilovecopy","message":"Update 011.md"},{"hash":"3bb5b0c80a6d13200c5eccc4f76e21cec83be289","time":1734795720000,"email":"1205611509@qq.com","author":"ilovecopy","message":"Update 011.md"},{"hash":"c5c53e9c97ca7c505bf588d01b5007dc123f0779","time":1734779082000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"},{"hash":"d5db2459b570e661d3d7d99a79f49d17d97f2ddc","time":1720103859000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"},{"hash":"ad1b481673e702ce9f7bf6fe56a7ac90d0eb2930","time":1716388112000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"},{"hash":"fef48aebc194f6e416926dd012542f925823cf45","time":1716387979000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"},{"hash":"0951367e0d815b803f7dcc0a07d29f463df6fbbf","time":1715524248000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"},{"hash":"26fca5d87b4817d65ef662742dc693b8c515bbcf","time":1715522683000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"},{"hash":"2be1877336d36add6192906de44e87ab5b1df4ec","time":1698592164000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"}]},"filePathRelative":"database/011.md"}');export{o as comp,l as data};
