import{_ as t,c as e,a as h,o as p}from"./app-DKkA6jZv.js";const s={};function n(r,a){return p(),e("div",null,a[0]||(a[0]=[h('<h1 id="_3-2-主存储器" tabindex="-1"><a class="header-anchor" href="#_3-2-主存储器"><span>3.2 主存储器</span></a></h1><h2 id="_3-2-1-sram-芯片和-dram-芯片" tabindex="-1"><a class="header-anchor" href="#_3-2-1-sram-芯片和-dram-芯片"><span>3.2.1 SRAM 芯片和 DRAM 芯片</span></a></h2><p>易失性，只要电源被切断，原来保存的信息就会丢失。</p><h3 id="_1-sram-的工作原理" tabindex="-1"><a class="header-anchor" href="#_1-sram-的工作原理"><span>1.SRAM 的工作原理</span></a></h3><p>常用做 Cache。不需要刷新。</p><p>引脚数量：数据线、地址线、片选线、读写控制线（1 或 2 条）。</p><h3 id="_2-dram-的工作原理" tabindex="-1"><a class="header-anchor" href="#_2-dram-的工作原理"><span>2.DRAM 的工作原理</span></a></h3><p>常用做主存。</p><p>采用地址线复用技术，行地址和列地址通过相同的引脚分先后两次输入，这样地址引脚可以减少一半。数据引脚不变。但是要加上行通选和列通选 2 根线，分两次传送地址信号。</p><p>2ms 刷新一次。</p><p>每次刷新一行。</p><p>（1）集中刷新</p><p>后面一段时间专门用于刷新，无法访问存储器，称为“死区”。</p><table><thead><tr><th>WR</th><th>WR</th><th>刷新</th><th>刷新</th></tr></thead></table><p>（2）分散刷新</p><p>每次读写完都刷新一行。</p><p>优点：没有死区。</p><table><thead><tr><th>WR</th><th>刷新</th><th>WR</th><th>刷新</th></tr></thead></table><p>（3）异步刷新</p><p>缩短了死时间。</p><table><thead><tr><th>WR</th><th>WR</th><th>刷新</th><th>WR</th><th>WR</th><th>刷新</th></tr></thead></table><p>2ms 内每行刷新一次。</p><h2 id="_3-2-2-只读存储器" tabindex="-1"><a class="header-anchor" href="#_3-2-2-只读存储器"><span>3.2.2 只读存储器</span></a></h2><p>非易失性。</p><h2 id="_3-2-3-主存储器的基本组成" tabindex="-1"><a class="header-anchor" href="#_3-2-3-主存储器的基本组成"><span>3.2.3 主存储器的基本组成</span></a></h2><p>对存储单元编号，也称编址。</p><p>现代计算机通常采用字节编址，存储体内的一个地址有 1 字节。</p><h2 id="_3-2-4-多模块存储器" tabindex="-1"><a class="header-anchor" href="#_3-2-4-多模块存储器"><span>3.2.4 多模块存储器</span></a></h2><h3 id="_1-单体多字存储器" tabindex="-1"><a class="header-anchor" href="#_1-单体多字存储器"><span>1.单体多字存储器</span></a></h3><p>存储器中只有一个存储体，每个存储单元存储 m 个字，总线宽度也为 m 个字。一次并行读出 m 个字，地址必须顺序排列并处于同一个单元。</p><h3 id="_2-多体并行存储器" tabindex="-1"><a class="header-anchor" href="#_2-多体并行存储器"><span>2.多体并行存储器</span></a></h3><p>（1）高位交叉编址 <img src="https://csnotes.oss-cn-beijing.aliyuncs.com/photos/高位交叉编址.png" alt="" loading="lazy"></p><p>（2）低位交叉编址 <img src="https://csnotes.oss-cn-beijing.aliyuncs.com/photos/低位交叉编址.png" alt="" loading="lazy"></p><p>可以采取流水线方式存取。</p>',34)]))}const c=t(s,[["render",n]]),o=JSON.parse('{"path":"/computerOrganization/032.html","title":"3.2 主存储器","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1720103859000,"contributors":[{"name":"ilovecopy","username":"ilovecopy","email":"1205611509@qq.com","commits":3,"url":"https://github.com/ilovecopy"}],"changelog":[{"hash":"d5db2459b570e661d3d7d99a79f49d17d97f2ddc","time":1720103859000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"},{"hash":"3825bec7230c73395f2e39b2dc6f06cba76bc726","time":1699757844000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"},{"hash":"2be1877336d36add6192906de44e87ab5b1df4ec","time":1698592164000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"}]},"filePathRelative":"computerOrganization/032.md"}');export{c as comp,o as data};
