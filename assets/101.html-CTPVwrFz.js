import{_ as e,c as p,a as s,o as t}from"./app-DKkA6jZv.js";const o={};function c(d,a){return t(),p("div",null,a[0]||(a[0]=[s('<h1 id="_10-1-数据库存储索引为什么不用二叉排序树-不用红黑树-而用-b-树" tabindex="-1"><a class="header-anchor" href="#_10-1-数据库存储索引为什么不用二叉排序树-不用红黑树-而用-b-树"><span>10.1 数据库存储索引为什么不用二叉排序树，不用红黑树，而用 B+ 树？</span></a></h1><p>判断索引好不好的三个原则：</p><p>1、能不能快速定位到元素所在位置</p><p>2、能不能较好的进行范围查询</p><p>3、树的高度是高还是低</p><h2 id="为什么不用二叉排序树" tabindex="-1"><a class="header-anchor" href="#为什么不用二叉排序树"><span>为什么不用二叉排序树？</span></a></h2><p>二叉排序树查找效率分析：</p><p>二叉排序树的的平均查找长度为$O(log_2n)$。</p><p>而二叉排序树最坏情况是只有一个左（右）孩子的单支树，其平均查找长度为 O(n)</p><p>树的高度太高。</p><h2 id="为什么不用-b-树" tabindex="-1"><a class="header-anchor" href="#为什么不用-b-树"><span>为什么不用 B 树？</span></a></h2><p>范围查找时还要向上层搜索，太慢。</p><h2 id="为什么不用红黑树" tabindex="-1"><a class="header-anchor" href="#为什么不用红黑树"><span>为什么不用红黑树？</span></a></h2><p>红黑树本质上也还是特殊的二叉排序树，查找效率也不高。</p><h2 id="为什么用-b-树" tabindex="-1"><a class="header-anchor" href="#为什么用-b-树"><span>为什么用 B+ 树？</span></a></h2><p>m 阶 B+ 树每个分支结点最多有 m 棵子树。</p>',16)]))}const n=e(o,[["render",c]]),r=JSON.parse('{"path":"/database/101.html","title":"10.1 数据库存储索引为什么不用二叉排序树，不用红黑树，而用 B+ 树？","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1715524248000,"contributors":[{"name":"ilovecopy","username":"ilovecopy","email":"1205611509@qq.com","commits":3,"url":"https://github.com/ilovecopy"}],"changelog":[{"hash":"0951367e0d815b803f7dcc0a07d29f463df6fbbf","time":1715524248000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"},{"hash":"26fca5d87b4817d65ef662742dc693b8c515bbcf","time":1715522683000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"},{"hash":"2be1877336d36add6192906de44e87ab5b1df4ec","time":1698592164000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"}]},"filePathRelative":"database/101.md"}');export{n as comp,r as data};
