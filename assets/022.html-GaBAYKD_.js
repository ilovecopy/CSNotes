import{_ as e,c as s,a as p,o as n}from"./app-DKkA6jZv.js";const t={};function h(c,a){return n(),s("div",null,a[0]||(a[0]=[p('<h1 id="_2-2-处理机调度" tabindex="-1"><a class="header-anchor" href="#_2-2-处理机调度"><span>2.2 处理机调度</span></a></h1><h2 id="_2-2-1-调度的概念" tabindex="-1"><a class="header-anchor" href="#_2-2-1-调度的概念"><span>2.2.1 调度的概念</span></a></h2><p>在多道程序系统中，进程数量多于处理机个数，从就绪队列中按照一定的算法选择进程分配处理机称为调度。</p><h2 id="_2-2-2-调度的目标" tabindex="-1"><a class="header-anchor" href="#_2-2-2-调度的目标"><span>2.2.2 调度的目标</span></a></h2><p>（1）CPU 利用率</p><p>（2）系统吞吐量</p><p>（3）周转时间</p><p>周转时间=作业完成时间 - 作业提交时间</p><p>（4）等待时间</p><p>（5）响应时间</p><h2 id="_2-2-3-调度的实现" tabindex="-1"><a class="header-anchor" href="#_2-2-3-调度的实现"><span>2.2.3 调度的实现</span></a></h2><h3 id="_3-进程调度方式" tabindex="-1"><a class="header-anchor" href="#_3-进程调度方式"><span>3.进程调度方式</span></a></h3><p>（1）非抢占式调度</p><p>（2）抢占式调度</p><h2 id="_2-2-4-经典的调度算法" tabindex="-1"><a class="header-anchor" href="#_2-2-4-经典的调度算法"><span>2.2.4 经典的调度算法</span></a></h2><h3 id="_1-先来先服务-fcfs-调度算法" tabindex="-1"><a class="header-anchor" href="#_1-先来先服务-fcfs-调度算法"><span>1.先来先服务（FCFS）调度算法</span></a></h3><blockquote><p>先来先服务就像超市排队结账，先到先结账。</p></blockquote><figure><img src="https://csnotes.oss-cn-beijing.aliyuncs.com/photos/FCFS.drawio.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure><p>若一个长进程线到达系统，会使后面的许多短进程等待很长时间，因此对短进程不利。</p><p>有利于长作业，不利于短作业</p><h3 id="_2-短作业优先-sjf-调度算法" tabindex="-1"><a class="header-anchor" href="#_2-短作业优先-sjf-调度算法"><span>2.短作业优先（SJF）调度算法</span></a></h3><p>考虑进程要求服务时间</p><h3 id="_3-优先级调度算法" tabindex="-1"><a class="header-anchor" href="#_3-优先级调度算法"><span>3.优先级调度算法</span></a></h3><p>（1）非抢占式优先级调度算法</p><p>（2）抢占式优先级调度算法</p><p>I/O 型作业的优先权高于计算型作业的优先权，这是因为 I/O 型操作需要及时完成，它没办法长时间地保存所要输入/输出的数据，所以考虑到系统资源利用率，要选择 I/O 繁忙型作业有更高优先级。</p><h3 id="_4-高响应比优先调度算法" tabindex="-1"><a class="header-anchor" href="#_4-高响应比优先调度算法"><span>4.高响应比优先调度算法</span></a></h3><p>考虑进程等待时间和要求服务时间</p><p>$\\text{响应比}=\\frac{\\text{响应时间}}{\\text{要求服务时间} } =\\frac{\\text{等待时间} +\\text{要求服务时间} }{\\text{要求服务时间} }$</p><p>满足短进程优先，因为等待时间相同的情况下，要求服务时间越短，响应比越高。</p><h3 id="_5-时间片轮转调度算法" tabindex="-1"><a class="header-anchor" href="#_5-时间片轮转调度算法"><span>5.时间片轮转调度算法</span></a></h3><p>目的：多个用户能够及时干预系统</p><h3 id="_6-多级反馈队列调度算法" tabindex="-1"><a class="header-anchor" href="#_6-多级反馈队列调度算法"><span>6.多级反馈队列调度算法</span></a></h3><figure><img src="https://csnotes.oss-cn-beijing.aliyuncs.com/photos/多级反馈队列调度算法.png" alt="" tabindex="0" loading="lazy"><figcaption></figcaption></figure>',34)]))}const o=e(t,[["render",h]]),d=JSON.parse('{"path":"/os/022.html","title":"2.2 处理机调度","lang":"zh-CN","frontmatter":{},"git":{"updatedTime":1720103859000,"contributors":[{"name":"ilovecopy","username":"ilovecopy","email":"1205611509@qq.com","commits":3,"url":"https://github.com/ilovecopy"}],"changelog":[{"hash":"d5db2459b570e661d3d7d99a79f49d17d97f2ddc","time":1720103859000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"},{"hash":"87edf6c08c4a79890356eb85f53da45fb5c46d12","time":1698675745000,"email":"1205611509@qq.com","author":"ilovecopy","message":"fix format"},{"hash":"2be1877336d36add6192906de44e87ab5b1df4ec","time":1698592164000,"email":"1205611509@qq.com","author":"ilovecopy","message":"add"}]},"filePathRelative":"os/022.md"}');export{o as comp,d as data};
